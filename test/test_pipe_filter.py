from resonance.tests.TestProcessor import TestProcessor
import resonance.pipe.filter
import numpy as np


class TestPipeFilter(TestProcessor):
    def setUp(self):
        self.time = 1E9
        self.si = resonance.si.Channels(1, 26)
        self.db = resonance.db.Channels(self.si, self.time, [
            9.35016242685414833e-01
            ,- 6.63122658240795304e-01
            ,- 4.64723172043768396e-01
            , 9.92708874098053973e-01
            ,- 2.39315664287558072e-01
            ,- 8.22983865893656130e-01
            , 8.22983865893655575e-01
            , 2.39315664287557295e-01
            ,- 9.92708874098054195e-01
            ,  4.64723172043769062e-01
            ,  6.63122658240796081e-01
            , - 9.35016242685415055e-01
            , - 9.79717439317882566e-16
            ,  9.35016242685415833e-01
            , - 6.63122658240791862e-01
            , - 4.64723172043767674e-01
            ,  9.92708874098053862e-01
            , - 2.39315664287555380e-01
            , - 8.22983865893658795e-01
            ,  8.22983865893657129e-01
            ,  2.39315664287558238e-01
            , - 9.92708874098054306e-01
            ,  4.64723172043765065e-01
            ,  6.63122658240794083e-01
            , - 9.35016242685414722e-01
            , - 1.95943487863576513e-15
        ])
        self.ba = (
            [0.0465829066364436689, 0.1863316265457746757, 0.2794974398186620412, 0.1863316265457746757, 0.0465829066364436689],
            [1.0000000000000000000, -0.7820951980233376011,  0.6799785269162993417, -0.1826756977530322179,  0.0301188750431692284])

        self.expected = resonance.db.Channels(self.si, self.time, [
            0.04355577433657303182
            , 0.17739767842377271445
            , 0.22525064753860540856
            , 0.01203007154782513924
            ,- 0.14873139458209710950
            ,- 0.01164977332361996978
            , 0.06886207424754967055
            ,- 0.02962840432194258772
            ,- 0.00377071861907160837
            ,  0.04870207750908684546
            , - 0.04388049480176301614
            , - 0.03116268960854324740
            ,  0.06594320776813764051
            , - 0.00928891791840964591
            , - 0.05647581830546980625
            ,  0.04770159710550058579
            ,  0.02055919131626847071
            , - 0.06246265071717361367
            ,  0.02463108864724519037
            ,  0.04548190937186857852
            , - 0.05708181059114051520
            , - 0.00531457150135858803
            ,  0.06079863765675491000
            , - 0.03768093227054283845
            , - 0.03399460136256623327
            ,  0.06176906046401797745
        ])

        self.expected_2_blocks = resonance.db.Channels(self.si, self.time * 2, [
              0.04355577433657303182
            , 0.17739767842377271445
            , 0.22525064753860540856
            , 0.01203007154782513924
            ,- 0.14873139458209710950
            ,- 0.01164977332361996978
            , 0.06886207424754967055
            ,- 0.02962840432194258772
            ,- 0.00377071861907160837
            ,  0.04870207750908684546
            , - 0.04388049480176301614
            , - 0.03116268960854324740
            ,  0.06594320776813764051
            , - 0.00928891791840964591
            , - 0.05647581830546980625
            ,  0.04770159710550058579
            ,  0.02055919131626847071
            , - 0.06246265071717361367
            ,  0.02463108864724519037
            ,  0.04548190937186857852
            , - 0.05708181059114051520
            , - 0.00531457150135858803
            ,  0.06079863765675491000
            , - 0.03768093227054283845
            , - 0.03399460136256623327
            ,  0.06176906046401797745
            , - 0.00985968467033247753
            , - 0.05478792701119506586
            ,  0.04873257664167113257
            ,  0.02023924103129351448
            , - 0.06308839867255296163
            ,  0.02449675101879350211
            ,  0.04571284064528599589
            , - 0.05691452605013669341
            , - 0.00534646076778878647
            ,  0.06070617894859293984
            , - 0.03770795633571594890
            , - 0.03396373063417427313
            ,  0.06179565060628578604
            , - 0.00986203196785001221
            , - 0.05480139028078970242
            ,  0.04872757077626199002
            ,  0.02024325104283862878
            , - 0.06308424729499827188
            ,  0.02449676211807959997
            ,  0.04571090978108213049
            , - 0.05691540613827990314
            , - 0.00534595914155416504
            ,  0.06070681665283792633
            , - 0.03770790130061484058
            , - 0.03396400307449333467
            ,  0.06179550149398228137
        ])

    def test_single_channel(self):
        self.check_processor([self.si], [self.db], {'out_0': self.expected}, resonance.pipe.filter, self.ba)

    def test_multiple_channels(self):
        channels = 2

        si = resonance.si.Channels(channels, self.si.samplingRate)
        data = np.zeros((self.db.shape[0], channels))
        data[:, 0] = self.db[:, 0]
        data[:, 1] = self.db[:, 0]
        data = resonance.db.Channels(si, 1E9, data)

        expected = np.zeros_like(data)
        expected[:, 0] = self.expected[:, 0]
        expected[:, 1] = self.expected[:, 0]
        expected = resonance.db.Channels(si, 1E9, expected)

        self.check_processor([si], [data], {'out_0': expected}, resonance.pipe.filter, self.ba)

    def test_non_ba_input(self):
        with self.assertRaises(Exception):
            resonance.pipe.filter(self.db, [1, 2, 3])

    def test_multiple_blocks(self):
        data = resonance.db.Channels(self.si, self.time*2, self.db)
        self.check_processor([self.si], [self.db, data], {'out_0': self.expected_2_blocks}, resonance.pipe.filter, self.ba)




