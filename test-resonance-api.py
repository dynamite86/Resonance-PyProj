# This file is used for low-level Resonance-Api test
# The test is pretty straightforward - we are expecting certain calls in certain order
# and test that they are performed in that order.

import numpy as np

import resonate
import resonance.si as si
import resonance.db as db


test_report = []

si_channels = None
si_events = None


def on_prepare(code, inputs):
    global test_report
    if len(test_report) != 0:
        test_report = []
        raise Exception("Sequence started wrong")

    test_report.append(("onPrepare", (inputs, code)))

    global si_channels
    si_channels = si.OutputStream(
        id=1,
        name="channels-out",
        source=si.Channels(
            channels=3,
            samplingRate=21.0
        )
    )
    global si_events
    si_events = si.OutputStream(
        id=2,
        name="event-out", source=si.Event()
    )

    resonate.add_to_queue("createOutputStream", si_channels)
    resonate.add_to_queue("createOutputStream", si_events)


def on_start():
    test_report.append(("onStart"))


def on_data_block(block):
    test_report.append(("onDataBlock", block))

    if block.SI.id == 1:
        data = block
        data[:, 1] = -data[:, 1]
        resonate.add_to_queue("sendBlockToStream", (si_channels, data))

    if block.SI.id == 2:
        resonate.add_to_queue("sendBlockToStream", (si_events, block[0]+" out"))


def on_stop():
    print("Stops")

    test_report.append(('onStop'))

    ch_si = si.Channels(3, 21, 1, "channels")
    ev_si = si.Event(2, "event")

    expected_report = [
        ("onPrepare", (
            [
                si.Channels(
                    3,
                    21.0,
                    1,
                    "channels"
                ),
                si.Event(
                    2,
                    "event"
                )
            ], "")),
        ("onStart"),
        ("onDataBlock", db.Channels(ch_si, 946729805250000000, [
            [0.29475517441090415, -0.29475517441090415, 0.29475517441090415                ],
            [0.56332005806362195, -0.56332005806362195, 0.56332005806362195                ],
            [0.7818314824680298, -0.7818314824680298, 0.7818314824680298                   ],
            [0.93087374864420414, -0.93087374864420414, 0.93087374864420414                ],
            [0.99720379718118013, -0.99720379718118013, 0.99720379718118013                ],
            [0.97492791218182362, -0.97492791218182362, 0.97492791218182362                ],
            [0.86602540378443871, -0.86602540378443871, 0.86602540378443871                ],
            [0.68017273777091969, -0.68017273777091969, 0.68017273777091969                ],
            [0.43388373911755823, -0.43388373911755823, 0.43388373911755823                ],
            [0.14904226617617472, -0.14904226617617472, 0.14904226617617472                ],
            [-0.14904226617617447, 0.14904226617617447, -0.14904226617617447               ],
            [-0.43388373911755801, 0.43388373911755801, -0.43388373911755801               ],
            [-0.68017273777091947, 0.68017273777091947, -0.68017273777091947               ],
            [-0.86602540378443837, 0.86602540378443837, -0.86602540378443837               ],
            [-0.97492791218182362, 0.97492791218182362, -0.97492791218182362               ],
            [-0.99720379718118024, 0.99720379718118024, -0.99720379718118024               ],
            [-0.93087374864420447, 0.93087374864420447, -0.93087374864420447               ],
            [-0.78183148246802991, 0.78183148246802991, -0.78183148246802991               ],
            [-0.56332005806362195, 0.56332005806362195, -0.56332005806362195               ],
            [-0.29475517441090471, 0.29475517441090471, -0.29475517441090471               ],
            [-2.4492935982947064e-16, 2.4492935982947064e-16, -2.4492935982947064e-16      ],
            [0.29475517441090426, -0.29475517441090426, 0.29475517441090426                ],
            [0.56332005806362229, -0.56332005806362229, 0.56332005806362229                ],
            [0.78183148246802958, -0.78183148246802958, 0.78183148246802958                ],
            [0.93087374864420425, -0.93087374864420425, 0.93087374864420425                ],
            [0.99720379718118013, -0.99720379718118013, 0.99720379718118013                ],
            [0.97492791218182373, -0.97492791218182373, 0.97492791218182373                ],
            [0.86602540378443915, -0.86602540378443915, 0.86602540378443915                ],
            [0.68017273777091924, -0.68017273777091924, 0.68017273777091924                ],
            [0.43388373911755845, -0.43388373911755845, 0.43388373911755845                ],
            [0.14904226617617364, -0.14904226617617364, 0.14904226617617364                ],
            [-0.14904226617617292, 0.14904226617617292, -0.14904226617617292               ],
            [-0.43388373911755779, 0.43388373911755779, -0.43388373911755779               ],
            [-0.68017273777091869, 0.68017273777091869, -0.68017273777091869               ],
            [-0.86602540378443871, 0.86602540378443871, -0.86602540378443871               ],
            [-0.97492791218182351, 0.97492791218182351, -0.97492791218182351               ],
            [-0.99720379718118024, 0.99720379718118024, -0.99720379718118024               ],
            [-0.93087374864420425, 0.93087374864420425, -0.93087374864420425               ],
            [-0.78183148246803014, 0.78183148246803014, -0.78183148246803014               ],
            [-0.56332005806362295, 0.56332005806362295, -0.56332005806362295               ],
            [-0.29475517441090582, 0.29475517441090582, -0.29475517441090582               ],
            [-4.8985871965894128e-16, 4.8985871965894128e-16, -4.8985871965894128e-16      ],
            [0.29475517441090315, -0.29475517441090315, 0.29475517441090315                ],
            [0.56332005806362206, -0.56332005806362206, 0.56332005806362206                ],
            [0.78183148246802947, -0.78183148246802947, 0.78183148246802947                ],
            [0.93087374864420447, -0.93087374864420447, 0.93087374864420447                ],
            [0.99720379718118013, -0.99720379718118013, 0.99720379718118013                ],
            [0.97492791218182373, -0.97492791218182373, 0.97492791218182373                ],
            [0.86602540378443837, -0.86602540378443837, 0.86602540378443837                ],
            [0.68017273777091936, -0.68017273777091936, 0.68017273777091936                ],
            [0.43388373911756023, -0.43388373911756023, 0.43388373911756023                ],
            [0.14904226617617389, -0.14904226617617389, 0.14904226617617389                ],
            [-0.14904226617617267, 0.14904226617617267, -0.14904226617617267               ],
            [-0.43388373911755757, 0.43388373911755757, -0.43388373911755757               ],
            [-0.6801727377709198, 0.6801727377709198, -0.6801727377709198                  ],
            [-0.86602540378443771, 0.86602540378443771, -0.86602540378443771               ],
            [-0.97492791218182351, 0.97492791218182351, -0.97492791218182351               ],
            [-0.99720379718118013, 0.99720379718118013, -0.99720379718118013               ],
            [-0.93087374864420491, 0.93087374864420491, -0.93087374864420491               ],
            [-0.78183148246803025, 0.78183148246803025, -0.78183148246803025               ],
            [-0.56332005806362462, 0.56332005806362462, -0.56332005806362462               ],
            [-0.29475517441090265, 0.29475517441090265, -0.29475517441090265               ],
            [-7.3478807948841188e-16, 7.3478807948841188e-16, -7.3478807948841188e-16       ]
        ])),
        ("onDataBlock", db.Event(ev_si, 946729905250000000, "test")),
        ("onStop")
    ]

    if expected_report != test_report:
        print("failed")
        print(test_report.__repr__())
        print("but")
        print(expected_report.__repr__())
        # raise Exception("Test didn't pass")

    print("passed")


def trace(what):
    print(type(what))
    print(what)


resonate.register_callbacks(
    on_prepare,
    on_data_block,
    on_start,
    on_stop,
    si.Channels,
    si.Event,
    db.Event,
    db.Channels,
    trace
)
